---
description: 
globs: 
alwaysApply: false
---
# Commit Message Format

## Overview
This document outlines the standard format for commit messages in this project. Following this format helps maintain a clear and consistent commit history.

## Format
```
<type>(<scope>): <description>

[optional body]

[optional footer(s)]
```

## Types
- `feat`: A new feature
- `fix`: A bug fix
- `docs`: Documentation only changes
- `style`: Changes that do not affect the meaning of the code (white-space, formatting, etc)
- `refactor`: A code change that neither fixes a bug nor adds a feature
- `perf`: A code change that improves performance
- `test`: Adding missing tests or correcting existing tests
- `chore`: Changes to the build process or auxiliary tools and libraries

## Scope
The scope is optional and represents the section of the codebase that the commit affects.

## Description
- Use the imperative, present tense: "change" not "changed" nor "changes"
- Don't capitalize the first letter
- No period (.) at the end

## Examples
```
feat(auth): add user authentication system
fix(api): resolve rate limiting issue
docs(readme): update installation instructions
style(ui): format button components
refactor(database): optimize query performance
perf(cache): implement Redis caching
test(api): add unit tests for user endpoints
chore(deps): update dependencies to latest versions
```

## Breaking Changes
If the commit includes breaking changes, add `BREAKING CHANGE:` in the footer section followed by a description of the changes.

Example:
```
feat(api): change authentication method

BREAKING CHANGE: Authentication now requires JWT token instead of API key
```
